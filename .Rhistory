employee <- list(name="Huang", zip=98195, union=)
employee <- list(name="Huang", zip=98195, union=FALSE)
paste("a", "b")
paste("a", "b", sep="-")
paste("a", "b, sep=x <- "-"")
paste("a", "b", sep=x <- "-")
x
a <- 1
1 -> a
a
employee
list(1,2,3)
list(1:3)
employee[c(1,2)]
employee
employee[[2]]
employee[2]
employee[c(1,2)]
employee[c("name", "zip")]
var <- "union"
employee[[var]]
employee$var
add1 <- function(x) x+1
add1
add1(4)
a
vector("list", 3)
vector("logical", 3)
vector("numeric", )
vector("numberic", 3)
a <- vector("list", 3)
lapply(a, function(x) 1:3)
f <- function(x) 1:3
f(1)
f(NA)
f(NULL)
lapply(a, function(x) 1:3)
height <- c(160,171,177,199,182)
weight <- c(66,77,88,82,92)
health <- data.frame(height,weight)
health
health$height
health[["weight"]]
height[c("height")]
health[c("height")]
health[c(2,1)]
health[1,1]
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
print(minutes_in_day)
print(hours_in_year)
minutes_in_day <- 24*60
hours_in_year <- 24*365
minutes_rule <- minutes_in_day > hours_in_year
install.packages("stringr")
## Create a variable `my_name` that is equal to your first name
my_name <- "Wai Kwan"
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 24*60
today <- as.Date(Sys.Date())
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
today <- Sys.Date()
winter_break <- as.Date("12/15/2018", format = "%B %d %Y")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("12/15/2018")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("12/15/2018")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- "Dec 15, 2018"
format_date <- as.Date(winter_break, format = "%m/%d/%y")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date(12/15/2018)
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("12/15/2018")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(my_name, my_age, upcoming){
days_until_birthday <- as.Date("2019-09-30") - as.Date(Sys.Date())
upcoming <- 24
return(paste(make_introduction("Janette", 23), " In ", days_until_birthday, " days I'll be ", upcoming ))
}
days_until_birthday <- as.Date("2019-09-30") - as.Date(Sys.Date())
upcoming <- 24
return(paste(make_introduction("Janette", 23), " In ", days_until_birthday, " days I'll be ", upcoming ))
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(my_name, my_age){
sentence <- paste('Hello, my name is ', my_name, ' and I am ', my_age, ' years old.')
return(sentence)
}
return(paste(make_introduction("Janette", 23), " In ", days_until_birthday, " days I'll be ", upcoming ))
print(winter_break)
print(days_to_break)
print(my_bday_intro)
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, upcoming)
print(my_bday_intro)
remove_digits(c("INFO 201", "CSE 142", "INFO 200"))
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
remove_digits <- function(x){
gsub('[0-9]+', '', x)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
remove_digits(c("INFO 201", "CSE 142", "INFO 200"))
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
remove_digits <- function(x){
gsub('[0-9]+', '', x)
return(x)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
remove_digits(c("INFO 201", "CSE 142", "INFO 200"))
gsub('[0-9]+', '', x)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
remove_digits <- function(x){
gsub('[0-9]+', '', x)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
remove_digits(c("INFO 201", "CSE 142", "INFO 200"))
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
remove_digits(c("INFO 201", "CSE 142", "mps-803c"))
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
x <- c("INFO 201", "CSE 142", "mps-803c")
remove_digits(x)
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if(str_detect(x, "[0-9]")){
print("Oh no!")
}else{
print("Yay!")
}
# Create a vector `first_names` with 5 names in it
first_names <- c("Sarah", "Ada", "Bonnie", "David", "Frankie")
# Create a vector `math_grades` with 5 hypothetical grades (0 - 100) in a math course (that correspond to the 5 names above)
math_grades <- c(87, 95, 88, 79, 90)
# Create a vector `spanish_grades` with 5 hypothetical grades (0 - 100) in a Spanish course (that correspond to the 5 names above)
spanish_grades <- c(78, 88, 87, 90, 91)
## Create a data.frame `students` by combining your vectors `first_names`, `math_grades`, and `spanish_grades`
students <- data.frame(first_names, math_grades, spanish_grades)
print (students)
# Create a variable `num_students` that contains the number of rows in your data.frame `students`
num_students <- nrow(students)
# Create a variable `num_courses` that contains the number of columns in your data.frame `students` minus one (b/c of their names)
num_courses <- ncol(students - 1)
# Create a variable `num_courses` that contains the number of columns in your data.frame `students` minus one (b/c of their names)
num_courses <- ncol(students - 1, stringsAsFactors = FALSE)
## Add a new column `grade_diff` to your dataframe, which is equal to the difference between
## math_grades and spanish_grades.  Note: use the variables inside the dataframe (like "students$math_grade")
## not the ones in your workspace.
students["grade_diff"] <- NA
students$grade_diff <- students$math_grades - students$spanish_grades
print(students)
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that indicates that a student got a better grade in math
students["better_at_math"] <- TRUE
students$better_at_math <- students$grade_diff > 0
print(students)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- ncol(students$better_at_math)
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students[better_at_math]
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$better_at_math
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- nrow(students$better_at_math)
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- ncol(students$better_at_math)
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$better_at_math
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$better_at_math = TRUE
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$better_at_math["TRUE"]
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$better_at_math[TRUE]
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$grade_diff > 0
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$better_at_math["TRUE"]
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- students$better_at_math == TRUE
print(num_better_at_math)
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- sum(students$better_at_math == TRUE)
print(num_better_at_math)
library("Titanic")
## This data set actually loads in a format called a *table*
## This is not a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
View(Titanic)
## In this section, you'll work with some data that comes built into the R environment.
## Load the `Titanic` data set. You may also want to use RStudio to `View()` it to inspect its rows and columns,
## or just print (selected lines of) it.
library(Titanic)
## You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
## Be sure to **not** treat strings as factors!
Titanic <- data.frame(class, sex, age, survived, freq, stringsAsFactors = FALSE )
print(Titanic)
## You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
## Be sure to **not** treat strings as factors!
Titanic <- data.frame(Titanic$class, sex, age, survived, freq, stringsAsFactors = FALSE )
print(Titanic)
## You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
## Be sure to **not** treat strings as factors!
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE )
print(Titanic)
is.data.frame(Titanic)
## You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
## Be sure to **not** treat strings as factors!
titanic <- data.frame(Titanic, stringsAsFactors = FALSE )
print(titanic)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- nrol(titanic$Age == children)
print(children)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic$Age == "children"
print(children)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic$Age == "child"
print(children)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[,Age == "child"]
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[,titanic$Age == "child"]
print(children)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[is.element(titanic$Age, "child")]
print(children)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[,titanic$Age == "child"]
print(children)
# Create a variable `num_children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num_children <- sum(titanic$Age == "child")
print(num_children)
# Create a variable `num_children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num_children <- sum(titanic$Age == 'child')
print(num_children)
# Create a variable `num_children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num_children <- sum(titanic$Age == "Child")
print(num_children)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[,titanic$Age == "Child"]
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[is.element(titanic$Age, "Child")]
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[,titanic$Age == "Child"]
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[,Age == "Child"]
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- subset(titanic, titanic$Age == "Child")
print(children)
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
most_lost <- subset(titanic, titanic$Survived == "No")
print(most_lost)
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
not_survived <- subset(titanic, titanic$Survived == "No")
print(not_survived)
not_survived_firstclass <- sum(not_survived, not_survived$Class == "1st")
not_survived_firstclass <- sum(not_survived$Class == "1st")
print(not_survived_firstclass)
not_survived_first <- sum(not_survived$Class == "1st")
print(not_survived_first)
not_survived_second <- sum(not_survived$Class == "2nd")
print(not_survived_second)
View(Titanic)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv('life-expectancy.csv', stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("life-expectancy.csv", stringsAsFactors = FALSE)
print(life_expectancy)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("~/Desktop/INFO201/play/a3-using-data-Janette-cwk/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("Desktop/INFO201/play/a3-using-data-Janette-cwk/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("/Desktop/INFO201/play/a3-using-data-Janette-cwk/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("~/Desktop/INFO201/play/a3-using-data-Janette-cwk/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("~/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("a3-using-data-Janette-cwk/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("~/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("/Desktop/INFO201/play/a3-using-data-Janette-cwk")
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("Desktop/INFO201/play/a3-using-data-Janette-cwk")
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("/Desktop/INFO201/play/a3-using-data-Janette-cwk")
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk/")
## Before you get started, make sure to set you are in the right working directory.
## If needed, set it here.  You may use tilde (~) to refer to your home directory.
setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
life_expectancy <- read.csv("./data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
life_expectancy <- read.csv("/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
life_expectancy <- read.csv("~/data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
life_expectancy <- read.csv("data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
life_expectancy <- read.csv("data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
life_expectancy <- read.csv("data/life-expectancy.csv", stringsAsFactors = FALSE)
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
pwd
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
#setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
getwd()
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("~/Desktop/INFO201/play/a3-using-data-Janette-cwk")
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
setwd("Desktop/INFO201/play/a3-using-data-Janette-cwk")
## Before you get started, make sure to set you are in the right working directory.
## If needed, set it here.  You may use tilde (~) to refer to your home directory.
setwd("c/Users/janet/Desktop/INFO201/play/a3-using-data-Janette-cwk")
## Before you get started, make sure to set you are in the right working directory.
## If needed, set it here.  You may use tilde (~) to refer to your home directory.
setwd("/c/Users/janet/Desktop/INFO201/play/a3-using-data-Janette-cwk")
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
most_lost <- subset(titanic, titanic$Survived == "No")
print(most_lost)
install.packages("readxl")
library(readxl)
library(leaflet)
library(dplyr)
library(shiny)
library(shinydashboard)
library(graphics)
library(googleVis)
setwd("C:/Users/janet/Desktop/INFO201/play/final_project_info_201/Scripts")
setwd("C:/Users/janet/Desktop/INFO201/play/final_project_info_201")
data <- read_excel("data/IDSReport.xlsx", sheetIndex = 1)
data <- read_excel("data/IDSReport.xlsx")
warnings()
View(data)
rm(data)
data <- read_excel("data/IDSReport.xlsx", stringsAsFactors = FALSE)
data <- read_xlsx("data/IDSReport.xlsx")
View(data)
install.packages("gdata")
library(gdata)
data <- read.xls("data/IDSReport.xlsx", stringAsFactor = FALSE)
rm(data)
data <- read.csv("data/IDSReport.xlsx", stringsAsFactors = FALSE)
rm(data)
data <- read_xlsx("data/IDSReport.xlsx")
View(data)
filter_data <- filter(data, COUNTRY, SEIZURE_DATE, DRUG_NAME, AMOUNT, DRUG_UNIT, DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
data <- read_xlsx("data/IDSReport.xlsx", sheet = 6)
filter_data <- filter(data, COUNTRY, SEIZURE_DATE, DRUG_NAME, AMOUNT, DRUG_UNIT, DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
filter_data <- filter(data, COUNTRY, as.Date(SEIZURE_DATE), DRUG_NAME, AMOUNT, DRUG_UNIT, DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
data <- read_xlsx("data/IDSReport.xlsx", sheet = 6) %>%
filter(data, COUNTRY, SEIZURE_DATE, DRUG_NAME, AMOUNT, DRUG_UNIT, DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
typeof(data$SEIZURE_DATE[1])
class(data$SEIZURE_DATE[1])
data <- read_xlsx("data/IDSReport.xlsx", sheet = 6) %>%
filter(data, COUNTRY, DRUG_NAME, AMOUNT, DRUG_UNIT, DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
filter_data <- filter(data, SUBREGION)
filter_data <- select(data, SUBREGION , COUNTRY, SEIZURE_DATE, DRUG_NAME, AMOUNT, DRUG_UNIT,
DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
View(filter_data)
rm(filter_data)
data <- read_xlsx("data/IDSReport.xlsx", sheet = 6) %>%
select(data, SUBREGION , COUNTRY, SEIZURE_DATE, DRUG_NAME, AMOUNT, DRUG_UNIT,
DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
data <- select(data, SUBREGION , COUNTRY, SEIZURE_DATE, DRUG_NAME, AMOUNT, DRUG_UNIT,
DEPARTURE_COUNTRY, DESTINATION_COUNTRY)
runApp('Scripts')
runApp('Scripts')
runApp('Scripts')
runApp('Scripts')
runApp('Scripts')
response <- "https://api.mapbox.com/v4/mapbox.emerald/page.html?access_token=pk.eyJ1IjoiamFuZXR0ZWN3ayIsImEiOiJjanA2ZHJwcW0wOHk3M3BvNmNlYWE2dGJ5In0.ZsZjug12tYHP1K_751NFWA"
library(httr)
response <- GET("https://api.mapbox.com/v4/mapbox.emerald/page.html?access_token=pk.eyJ1IjoiamFuZXR0ZWN3ayIsImEiOiJjanA2ZHJwcW0wOHk3M3BvNmNlYWE2dGJ5In0.ZsZjug12tYHP1K_751NFWA")
print(response)
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles(response)
setView(lng = 31.165580, lat = 48.379433, zoom = 6)
})
leaflet() %>%
addTiles() %>%
addProviderTiles(response)
setView(lng = 31.165580, lat = 48.379433, zoom = 6)
runApp('Scripts')
leaflet() %>%
addTiles()
leaflet() %>%
addTiles(urlTemplate = response)
maptile <- "https://api.mapbox.com/v4/mapbox.emerald/page.html?access_token=pk.eyJ1IjoiamFuZXR0ZWN3ayIsImEiOiJjanA2ZHJwcW0wOHk3M3BvNmNlYWE2dGJ5In0.ZsZjug12tYHP1K_751NFWA"
leaflet() %>%
addTiles(urlTemplate = maptile)
runApp('Scripts')
